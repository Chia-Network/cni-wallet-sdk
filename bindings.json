{
  "entrypoint": "chia_sdk_bindings",
  "pymodule": "chia_wallet_sdk_py",
  "bindings": {
    "Clvm": {
      "type": "class",
      "methods": {
        "new": {
          "type": "constructor"
        },
        "add_coin_spend": {
          "args": {
            "coin_spend": "CoinSpend"
          }
        },
        "coin_spends": {
          "return": "Vec<CoinSpend>"
        },
        "pair": {
          "args": {
            "first": "Program",
            "rest": "Program"
          },
          "return": "Program"
        },
        "nil": {
          "return": "Program"
        },
        "string": {
          "args": {
            "value": "String"
          },
          "return": "Program"
        },
        "bool": {
          "args": {
            "value": "bool"
          },
          "return": "Program"
        },
        "atom": {
          "args": {
            "value": "Bytes"
          },
          "return": "Program"
        },
        "list": {
          "args": {
            "value": "Vec<Program>"
          },
          "return": "Program"
        },
        "delegated_spend": {
          "args": {
            "conditions": "Vec<Program>"
          },
          "return": "Spend"
        },
        "standard_spend": {
          "args": {
            "synthetic_key": "PublicKey",
            "spend": "Spend"
          },
          "return": "Spend"
        },
        "spend_standard_coin": {
          "args": {
            "coin": "Coin",
            "synthetic_key": "PublicKey",
            "spend": "Spend"
          }
        },
        "spend_cat_coins": {
          "args": {
            "cat_spends": "Vec<CatSpend>"
          }
        },
        "mint_nfts": {
          "args": {
            "parent_coin_id": "Bytes32",
            "nft_mints": "Vec<NftMint>"
          },
          "return": "MintedNfts"
        }
      }
    },
    "Program": {
      "type": "class",
      "methods": {
        "serialize": {
          "return": "SerializedProgram"
        },
        "serialize_with_backrefs": {
          "return": "SerializedProgram"
        },
        "run": {
          "args": {
            "solution": "Program",
            "max_cost": "u64",
            "mempool_mode": "bool"
          },
          "return": "Output"
        },
        "curry": {
          "args": {
            "program": "Program",
            "args": "Vec<Program>"
          },
          "return": "Program"
        },
        "uncurry": {
          "return": "Option<CurriedProgram>"
        },
        "tree_hash": {
          "return": "TreeHash"
        },
        "length": {
          "return": "u32"
        },
        "first": {
          "return": "Program"
        },
        "rest": {
          "return": "Program"
        },
        "to_string": {
          "type": "to_string",
          "return": "Option<String>"
        },
        "to_bool": {
          "return": "Option<bool>"
        },
        "to_atom": {
          "return": "Option<Bytes>"
        },
        "to_list": {
          "return": "Option<Vec<Program>>"
        },
        "to_pair": {
          "return": "Option<Pair>"
        },
        "puzzle": {
          "return": "Puzzle"
        }
      }
    },
    "Puzzle": {
      "type": "class",
      "new": true,
      "fields": {
        "puzzle_hash": "Bytes32",
        "program": "Program",
        "mod_hash": "Bytes32",
        "args": "Option<Program>"
      },
      "methods": {
        "parse_nft": {
          "return": "Option<ParsedNft>"
        }
      }
    },
    "Simulator": {
      "type": "class",
      "methods": {
        "new": {
          "type": "constructor"
        },
        "new_coin": {
          "args": {
            "puzzle_hash": "Bytes32",
            "amount": "u64"
          },
          "return": "Coin"
        },
        "bls": {
          "args": {
            "amount": "u64"
          },
          "return": "BlsPairWithCoin"
        },
        "spend_coins": {
          "args": {
            "coin_spends": "Vec<CoinSpend>",
            "secret_keys": "Vec<SecretKey>"
          }
        }
      }
    },
    "Output": {
      "type": "class",
      "new": true,
      "fields": {
        "value": "Program",
        "cost": "u64"
      }
    },
    "Pair": {
      "type": "class",
      "new": true,
      "fields": {
        "first": "Program",
        "rest": "Program"
      }
    },
    "CurriedProgram": {
      "type": "class",
      "new": true,
      "fields": {
        "program": "Program",
        "args": "Vec<Program>"
      }
    },
    "Address": {
      "type": "class",
      "new": true,
      "fields": {
        "puzzle_hash": "Bytes32",
        "prefix": "String"
      },
      "methods": {
        "encode": {
          "return": "String"
        },
        "decode": {
          "type": "factory",
          "args": {
            "address": "String"
          }
        }
      }
    },
    "Mnemonic": {
      "type": "class",
      "methods": {
        "new": {
          "type": "constructor",
          "args": {
            "mnemonic": "String"
          }
        },
        "from_entropy": {
          "type": "factory",
          "args": {
            "entropy": "Bytes"
          }
        },
        "generate": {
          "type": "factory",
          "args": {
            "use_24": "bool"
          }
        },
        "verify": {
          "type": "static",
          "args": {
            "mnemonic": "String"
          },
          "return": "bool"
        },
        "to_string": {
          "type": "to_string",
          "return": "String"
        },
        "to_entropy": {
          "return": "Bytes"
        },
        "to_seed": {
          "args": {
            "password": "String"
          },
          "return": "Bytes"
        }
      }
    },
    "Coin": {
      "type": "class",
      "new": true,
      "fields": {
        "parent_coin_info": "Bytes32",
        "puzzle_hash": "Bytes32",
        "amount": "u64"
      },
      "methods": {
        "coin_id": {
          "return": "Bytes32"
        }
      }
    },
    "CoinSpend": {
      "type": "class",
      "new": true,
      "fields": {
        "coin": "Coin",
        "puzzle_reveal": "SerializedProgram",
        "solution": "SerializedProgram"
      }
    },
    "SpendBundle": {
      "type": "class",
      "new": true,
      "fields": {
        "coin_spends": "Vec<CoinSpend>",
        "aggregated_signature": "Signature"
      }
    },
    "Spend": {
      "type": "class",
      "new": true,
      "fields": {
        "puzzle": "Program",
        "solution": "Program"
      }
    },
    "SecretKey": {
      "type": "class",
      "methods": {
        "from_seed": {
          "type": "factory",
          "args": {
            "seed": "Bytes"
          }
        },
        "from_bytes": {
          "type": "factory",
          "args": {
            "bytes": "Bytes32"
          }
        },
        "to_bytes": {
          "return": "Bytes32"
        },
        "public_key": {
          "return": "PublicKey"
        },
        "sign": {
          "args": {
            "message": "Bytes"
          },
          "return": "Signature"
        },
        "derive_unhardened": {
          "args": {
            "index": "u32"
          },
          "return": "SecretKey"
        },
        "derive_hardened": {
          "args": {
            "index": "u32"
          },
          "return": "SecretKey"
        },
        "derive_unhardened_path": {
          "args": {
            "path": "Vec<u32>"
          },
          "return": "SecretKey"
        },
        "derive_hardened_path": {
          "args": {
            "path": "Vec<u32>"
          },
          "return": "SecretKey"
        },
        "derive_synthetic": {
          "return": "SecretKey"
        },
        "derive_synthetic_hidden": {
          "args": {
            "hidden_puzzle_hash": "Bytes32"
          },
          "return": "SecretKey"
        }
      }
    },
    "PublicKey": {
      "type": "class",
      "methods": {
        "infinity": {
          "type": "factory"
        },
        "aggregate": {
          "type": "factory",
          "args": {
            "public_keys": "Vec<PublicKey>"
          }
        },
        "from_bytes": {
          "type": "factory",
          "args": {
            "bytes": "Bytes48"
          }
        },
        "to_bytes": {
          "return": "Bytes48"
        },
        "fingerprint": {
          "return": "u32"
        },
        "is_infinity": {
          "return": "bool"
        },
        "is_valid": {
          "return": "bool"
        },
        "derive_unhardened": {
          "args": {
            "index": "u32"
          },
          "return": "PublicKey"
        },
        "derive_unhardened_path": {
          "args": {
            "path": "Vec<u32>"
          },
          "return": "PublicKey"
        },
        "derive_synthetic": {
          "return": "PublicKey"
        },
        "derive_synthetic_hidden": {
          "args": {
            "hidden_puzzle_hash": "Bytes32"
          },
          "return": "PublicKey"
        }
      }
    },
    "Signature": {
      "type": "class",
      "methods": {
        "infinity": {
          "type": "factory"
        },
        "aggregate": {
          "type": "factory",
          "args": {
            "signatures": "Vec<Signature>"
          }
        },
        "from_bytes": {
          "type": "factory",
          "args": {
            "bytes": "Bytes96"
          }
        },
        "to_bytes": {
          "return": "Bytes96"
        },
        "is_infinity": {
          "return": "bool"
        },
        "is_valid": {
          "return": "bool"
        }
      }
    },
    "K1SecretKey": {
      "type": "class",
      "methods": {
        "from_bytes": {
          "type": "factory",
          "args": {
            "bytes": "Bytes32"
          }
        },
        "to_bytes": {
          "return": "Bytes32"
        },
        "public_key": {
          "return": "K1PublicKey"
        },
        "sign_prehashed": {
          "args": {
            "prehashed": "Bytes32"
          },
          "return": "K1Signature"
        }
      }
    },
    "K1PublicKey": {
      "type": "class",
      "methods": {
        "from_bytes": {
          "type": "factory",
          "args": {
            "bytes": "BytesImpl<33>"
          }
        },
        "to_bytes": {
          "return": "BytesImpl<33>"
        },
        "fingerprint": {
          "return": "u32"
        },
        "verify_prehashed": {
          "args": {
            "prehashed": "Bytes32",
            "signature": "K1Signature"
          },
          "return": "bool"
        }
      }
    },
    "K1Signature": {
      "type": "class",
      "methods": {
        "from_bytes": {
          "type": "factory",
          "args": {
            "bytes": "BytesImpl<64>"
          }
        },
        "to_bytes": {
          "return": "BytesImpl<64>"
        }
      }
    },
    "R1SecretKey": {
      "type": "class",
      "methods": {
        "from_bytes": {
          "type": "factory",
          "args": {
            "bytes": "Bytes32"
          }
        },
        "to_bytes": {
          "return": "Bytes32"
        },
        "public_key": {
          "return": "R1PublicKey"
        },
        "sign_prehashed": {
          "args": {
            "prehashed": "Bytes32"
          },
          "return": "R1Signature"
        }
      }
    },
    "R1PublicKey": {
      "type": "class",
      "methods": {
        "from_bytes": {
          "type": "factory",
          "args": {
            "bytes": "BytesImpl<33>"
          }
        },
        "to_bytes": {
          "return": "BytesImpl<33>"
        },
        "fingerprint": {
          "return": "u32"
        },
        "verify_prehashed": {
          "args": {
            "prehashed": "Bytes32",
            "signature": "R1Signature"
          },
          "return": "bool"
        }
      }
    },
    "R1Signature": {
      "type": "class",
      "methods": {
        "from_bytes": {
          "type": "factory",
          "args": {
            "bytes": "BytesImpl<64>"
          }
        },
        "to_bytes": {
          "return": "BytesImpl<64>"
        }
      }
    },
    "BlsPair": {
      "type": "class",
      "new": true,
      "fields": {
        "sk": "SecretKey",
        "pk": "PublicKey"
      }
    },
    "BlsPairWithCoin": {
      "type": "class",
      "new": true,
      "fields": {
        "sk": "SecretKey",
        "pk": "PublicKey",
        "puzzle_hash": "Bytes32",
        "coin": "Coin"
      }
    },
    "K1Pair": {
      "type": "class",
      "new": true,
      "fields": {
        "sk": "K1SecretKey",
        "pk": "K1PublicKey"
      }
    },
    "R1Pair": {
      "type": "class",
      "new": true,
      "fields": {
        "sk": "R1SecretKey",
        "pk": "R1PublicKey"
      }
    },
    "from_hex": {
      "type": "function",
      "args": {
        "value": "String"
      },
      "return": "Bytes"
    },
    "to_hex": {
      "type": "function",
      "args": {
        "value": "Bytes"
      },
      "return": "String"
    },
    "bytes_equal": {
      "type": "function",
      "args": {
        "lhs": "Bytes",
        "rhs": "Bytes"
      },
      "return": "bool"
    },
    "tree_hash_atom": {
      "type": "function",
      "args": {
        "atom": "Bytes32"
      },
      "return": "Bytes32"
    },
    "tree_hash_pair": {
      "type": "function",
      "args": {
        "first": "Bytes32",
        "rest": "Bytes32"
      },
      "return": "Bytes32"
    },
    "sha256": {
      "type": "function",
      "args": {
        "value": "Bytes"
      },
      "return": "Bytes32"
    },
    "curry_tree_hash": {
      "type": "function",
      "args": {
        "program": "Bytes32",
        "args": "Vec<Bytes32>"
      },
      "return": "Bytes32"
    },
    "generate_bytes": {
      "type": "function",
      "args": {
        "bytes": "u32"
      },
      "return": "Bytes"
    },
    "LineageProof": {
      "type": "class",
      "new": true,
      "fields": {
        "parent_parent_coin_info": "Bytes32",
        "parent_inner_puzzle_hash": "Option<Bytes32>",
        "parent_amount": "u64"
      }
    },
    "Cat": {
      "type": "class",
      "new": true,
      "fields": {
        "coin": "Coin",
        "lineage_proof": "Option<LineageProof>",
        "asset_id": "Bytes32",
        "p2_puzzle_hash": "Bytes32"
      }
    },
    "CatSpend": {
      "type": "class",
      "new": true,
      "fields": {
        "cat": "Cat",
        "spend": "Spend"
      }
    },
    "Nft": {
      "type": "class",
      "new": true,
      "fields": {
        "coin": "Coin",
        "lineage_proof": "LineageProof",
        "info": "NftInfo"
      }
    },
    "NftInfo": {
      "type": "class",
      "new": true,
      "fields": {
        "launcher_id": "Bytes32",
        "metadata": "Program",
        "metadata_updater_puzzle_hash": "Bytes32",
        "current_owner": "Option<Bytes32>",
        "royalty_puzzle_hash": "Bytes32",
        "royalty_ten_thousandths": "u16",
        "p2_puzzle_hash": "Bytes32"
      }
    },
    "ParsedNft": {
      "type": "class",
      "new": true,
      "fields": {
        "info": "NftInfo",
        "p2_puzzle": "Program"
      }
    },
    "NftMetadata": {
      "type": "class",
      "new": true,
      "fields": {
        "edition_number": "BigInt",
        "edition_total": "BigInt",
        "data_uris": "Vec<String>",
        "data_hash": "Option<Bytes32>",
        "metadata_uris": "Vec<String>",
        "metadata_hash": "Option<Bytes32>",
        "license_uris": "Vec<String>",
        "license_hash": "Option<Bytes32>"
      }
    },
    "NftMint": {
      "type": "class",
      "new": true,
      "fields": {
        "metadata": "Program",
        "metadata_updater_puzzle_hash": "Bytes32",
        "p2_puzzle_hash": "Bytes32",
        "royalty_puzzle_hash": "Bytes32",
        "royalty_ten_thousandths": "u16",
        "owner": "Option<DidOwner>"
      }
    },
    "DidOwner": {
      "type": "class",
      "new": true,
      "fields": {
        "did_id": "Bytes32",
        "inner_puzzle_hash": "Bytes32"
      }
    },
    "MintedNfts": {
      "type": "class",
      "new": true,
      "fields": {
        "nfts": "Vec<Nft>",
        "parent_conditions": "Vec<Program>"
      }
    },
    "standard_puzzle_hash": {
      "type": "function",
      "args": {
        "synthetic_key": "PublicKey"
      },
      "return": "Bytes32"
    },
    "cat_puzzle_hash": {
      "type": "function",
      "args": {
        "asset_id": "Bytes32",
        "inner_puzzle_hash": "Bytes32"
      },
      "return": "Bytes32"
    }
  },
  "napi": {
    "Bytes32": "napi::bindgen_prelude::Uint8Array",
    "Bytes48": "napi::bindgen_prelude::Uint8Array",
    "Bytes96": "napi::bindgen_prelude::Uint8Array",
    "BytesImpl<33>": "napi::bindgen_prelude::Uint8Array",
    "BytesImpl<64>": "napi::bindgen_prelude::Uint8Array",
    "Bytes": "napi::bindgen_prelude::Uint8Array",
    "TreeHash": "napi::bindgen_prelude::Uint8Array",
    "SerializedProgram": "napi::bindgen_prelude::Uint8Array"
  },
  "wasm": {
    "Bytes32": "Vec<u8>",
    "Bytes48": "Vec<u8>",
    "Bytes96": "Vec<u8>",
    "BytesImpl<33>": "Vec<u8>",
    "BytesImpl<64>": "Vec<u8>",
    "Bytes": "Vec<u8>",
    "TreeHash": "Vec<u8>",
    "SerializedProgram": "Vec<u8>",
    "Vec<Bytes32>": "js_sys::Array"
  },
  "pyo3": {
    "Bytes32": "Vec<u8>",
    "Bytes48": "Vec<u8>",
    "Bytes96": "Vec<u8>",
    "BytesImpl<33>": "Vec<u8>",
    "BytesImpl<64>": "Vec<u8>",
    "Bytes": "Vec<u8>",
    "TreeHash": "Vec<u8>",
    "SerializedProgram": "Vec<u8>"
  }
}
