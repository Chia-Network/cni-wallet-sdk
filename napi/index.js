// prettier-ignore
/* eslint-disable */
// @ts-nocheck
/* auto-generated by NAPI-RS */

const { createRequire } = require('node:module')
require = createRequire(__filename)

const { readFileSync } = require('node:fs')
let nativeBinding = null
const loadErrors = []

const isMusl = () => {
  let musl = false
  if (process.platform === 'linux') {
    musl = isMuslFromFilesystem()
    if (musl === null) {
      musl = isMuslFromReport()
    }
    if (musl === null) {
      musl = isMuslFromChildProcess()
    }
  }
  return musl
}

const isFileMusl = (f) => f.includes('libc.musl-') || f.includes('ld-musl-')

const isMuslFromFilesystem = () => {
  try {
    return readFileSync('/usr/bin/ldd', 'utf-8').includes('musl')
  } catch {
    return null
  }
}

const isMuslFromReport = () => {
  const report = typeof process.report.getReport === 'function' ? process.report.getReport() : null
  if (!report) {
    return null
  }
  if (report.header && report.header.glibcVersionRuntime) {
    return false
  }
  if (Array.isArray(report.sharedObjects)) {
    if (report.sharedObjects.some(isFileMusl)) {
      return true
    }
  }
  return false
}

const isMuslFromChildProcess = () => {
  try {
    return require('child_process').execSync('ldd --version', { encoding: 'utf8' }).includes('musl')
  } catch (e) {
    // If we reach this case, we don't know if the system is musl or not, so is better to just fallback to false
    return false
  }
}

function requireNative() {
  if (process.platform === 'android') {
    if (process.arch === 'arm64') {
      try {
        return require('./chia-wallet-sdk.android-arm64.node')
      } catch (e) {
        loadErrors.push(e)
      }
      try {
        return require('chia-wallet-sdk-android-arm64')
      } catch (e) {
        loadErrors.push(e)
      }

    } else if (process.arch === 'arm') {
      try {
        return require('./chia-wallet-sdk.android-arm-eabi.node')
      } catch (e) {
        loadErrors.push(e)
      }
      try {
        return require('chia-wallet-sdk-android-arm-eabi')
      } catch (e) {
        loadErrors.push(e)
      }

    } else {
      loadErrors.push(new Error(`Unsupported architecture on Android ${process.arch}`))
    }
  } else if (process.platform === 'win32') {
    if (process.arch === 'x64') {
      try {
        return require('./chia-wallet-sdk.win32-x64-msvc.node')
      } catch (e) {
        loadErrors.push(e)
      }
      try {
        return require('chia-wallet-sdk-win32-x64-msvc')
      } catch (e) {
        loadErrors.push(e)
      }

    } else if (process.arch === 'ia32') {
      try {
        return require('./chia-wallet-sdk.win32-ia32-msvc.node')
      } catch (e) {
        loadErrors.push(e)
      }
      try {
        return require('chia-wallet-sdk-win32-ia32-msvc')
      } catch (e) {
        loadErrors.push(e)
      }

    } else if (process.arch === 'arm64') {
      try {
        return require('./chia-wallet-sdk.win32-arm64-msvc.node')
      } catch (e) {
        loadErrors.push(e)
      }
      try {
        return require('chia-wallet-sdk-win32-arm64-msvc')
      } catch (e) {
        loadErrors.push(e)
      }

    } else {
      loadErrors.push(new Error(`Unsupported architecture on Windows: ${process.arch}`))
    }
  } else if (process.platform === 'darwin') {
    try {
        return require('./chia-wallet-sdk.darwin-universal.node')
      } catch (e) {
        loadErrors.push(e)
      }
      try {
        return require('chia-wallet-sdk-darwin-universal')
      } catch (e) {
        loadErrors.push(e)
      }

    if (process.arch === 'x64') {
      try {
        return require('./chia-wallet-sdk.darwin-x64.node')
      } catch (e) {
        loadErrors.push(e)
      }
      try {
        return require('chia-wallet-sdk-darwin-x64')
      } catch (e) {
        loadErrors.push(e)
      }

    } else if (process.arch === 'arm64') {
      try {
        return require('./chia-wallet-sdk.darwin-arm64.node')
      } catch (e) {
        loadErrors.push(e)
      }
      try {
        return require('chia-wallet-sdk-darwin-arm64')
      } catch (e) {
        loadErrors.push(e)
      }

    } else {
      loadErrors.push(new Error(`Unsupported architecture on macOS: ${process.arch}`))
    }
  } else if (process.platform === 'freebsd') {
    if (process.arch === 'x64') {
      try {
        return require('./chia-wallet-sdk.freebsd-x64.node')
      } catch (e) {
        loadErrors.push(e)
      }
      try {
        return require('chia-wallet-sdk-freebsd-x64')
      } catch (e) {
        loadErrors.push(e)
      }

    } else if (process.arch === 'arm64') {
      try {
        return require('./chia-wallet-sdk.freebsd-arm64.node')
      } catch (e) {
        loadErrors.push(e)
      }
      try {
        return require('chia-wallet-sdk-freebsd-arm64')
      } catch (e) {
        loadErrors.push(e)
      }

    } else {
      loadErrors.push(new Error(`Unsupported architecture on FreeBSD: ${process.arch}`))
    }
  } else if (process.platform === 'linux') {
    if (process.arch === 'x64') {
      if (isMusl()) {
        try {
        return require('./chia-wallet-sdk.linux-x64-musl.node')
      } catch (e) {
        loadErrors.push(e)
      }
      try {
        return require('chia-wallet-sdk-linux-x64-musl')
      } catch (e) {
        loadErrors.push(e)
      }

      } else {
        try {
        return require('./chia-wallet-sdk.linux-x64-gnu.node')
      } catch (e) {
        loadErrors.push(e)
      }
      try {
        return require('chia-wallet-sdk-linux-x64-gnu')
      } catch (e) {
        loadErrors.push(e)
      }

      }
    } else if (process.arch === 'arm64') {
      if (isMusl()) {
        try {
        return require('./chia-wallet-sdk.linux-arm64-musl.node')
      } catch (e) {
        loadErrors.push(e)
      }
      try {
        return require('chia-wallet-sdk-linux-arm64-musl')
      } catch (e) {
        loadErrors.push(e)
      }

      } else {
        try {
        return require('./chia-wallet-sdk.linux-arm64-gnu.node')
      } catch (e) {
        loadErrors.push(e)
      }
      try {
        return require('chia-wallet-sdk-linux-arm64-gnu')
      } catch (e) {
        loadErrors.push(e)
      }

      }
    } else if (process.arch === 'arm') {
      if (isMusl()) {
        try {
        return require('./chia-wallet-sdk.linux-arm-musleabihf.node')
      } catch (e) {
        loadErrors.push(e)
      }
      try {
        return require('chia-wallet-sdk-linux-arm-musleabihf')
      } catch (e) {
        loadErrors.push(e)
      }

      } else {
        try {
        return require('./chia-wallet-sdk.linux-arm-gnueabihf.node')
      } catch (e) {
        loadErrors.push(e)
      }
      try {
        return require('chia-wallet-sdk-linux-arm-gnueabihf')
      } catch (e) {
        loadErrors.push(e)
      }

      }
    } else if (process.arch === 'riscv64') {
      if (isMusl()) {
        try {
        return require('./chia-wallet-sdk.linux-riscv64-musl.node')
      } catch (e) {
        loadErrors.push(e)
      }
      try {
        return require('chia-wallet-sdk-linux-riscv64-musl')
      } catch (e) {
        loadErrors.push(e)
      }

      } else {
        try {
        return require('./chia-wallet-sdk.linux-riscv64-gnu.node')
      } catch (e) {
        loadErrors.push(e)
      }
      try {
        return require('chia-wallet-sdk-linux-riscv64-gnu')
      } catch (e) {
        loadErrors.push(e)
      }

      }
    } else if (process.arch === 'ppc64') {
      try {
        return require('./chia-wallet-sdk.linux-ppc64-gnu.node')
      } catch (e) {
        loadErrors.push(e)
      }
      try {
        return require('chia-wallet-sdk-linux-ppc64-gnu')
      } catch (e) {
        loadErrors.push(e)
      }

    } else if (process.arch === 's390x') {
      try {
        return require('./chia-wallet-sdk.linux-s390x-gnu.node')
      } catch (e) {
        loadErrors.push(e)
      }
      try {
        return require('chia-wallet-sdk-linux-s390x-gnu')
      } catch (e) {
        loadErrors.push(e)
      }

    } else {
      loadErrors.push(new Error(`Unsupported architecture on Linux: ${process.arch}`))
    }
  } else {
    loadErrors.push(new Error(`Unsupported OS: ${process.platform}, architecture: ${process.arch}`))
  }
}

nativeBinding = requireNative()

if (!nativeBinding || process.env.NAPI_RS_FORCE_WASI) {
  try {
    nativeBinding = require('./chia-wallet-sdk.wasi.cjs')
  } catch (err) {
    if (process.env.NAPI_RS_FORCE_WASI) {
      loadErrors.push(err)
    }
  }
  if (!nativeBinding) {
    try {
      nativeBinding = require('chia-wallet-sdk-wasm32-wasi')
    } catch (err) {
      if (process.env.NAPI_RS_FORCE_WASI) {
        loadErrors.push(err)
      }
    }
  }
}

if (!nativeBinding) {
  if (loadErrors.length > 0) {
    // TODO Link to documentation with potential fixes
    //  - The package owner could build/publish bindings for this arch
    //  - The user may need to bundle the correct files
    //  - The user may need to re-install node_modules to get new packages
    throw new Error('Failed to load native binding', { cause: loadErrors })
  }
  throw new Error(`Failed to load native binding`)
}

module.exports.Address = nativeBinding.Address
module.exports.AggSigAmount = nativeBinding.AggSigAmount
module.exports.AggSigMe = nativeBinding.AggSigMe
module.exports.AggSigParent = nativeBinding.AggSigParent
module.exports.AggSigParentAmount = nativeBinding.AggSigParentAmount
module.exports.AggSigParentPuzzle = nativeBinding.AggSigParentPuzzle
module.exports.AggSigPuzzle = nativeBinding.AggSigPuzzle
module.exports.AggSigPuzzleAmount = nativeBinding.AggSigPuzzleAmount
module.exports.AggSigUnsafe = nativeBinding.AggSigUnsafe
module.exports.AssertBeforeHeightAbsolute = nativeBinding.AssertBeforeHeightAbsolute
module.exports.AssertBeforeHeightRelative = nativeBinding.AssertBeforeHeightRelative
module.exports.AssertBeforeSecondsAbsolute = nativeBinding.AssertBeforeSecondsAbsolute
module.exports.AssertBeforeSecondsRelative = nativeBinding.AssertBeforeSecondsRelative
module.exports.AssertCoinAnnouncement = nativeBinding.AssertCoinAnnouncement
module.exports.AssertConcurrentPuzzle = nativeBinding.AssertConcurrentPuzzle
module.exports.AssertConcurrentSpend = nativeBinding.AssertConcurrentSpend
module.exports.AssertEphemeral = nativeBinding.AssertEphemeral
module.exports.AssertHeightAbsolute = nativeBinding.AssertHeightAbsolute
module.exports.AssertHeightRelative = nativeBinding.AssertHeightRelative
module.exports.AssertMyAmount = nativeBinding.AssertMyAmount
module.exports.AssertMyBirthHeight = nativeBinding.AssertMyBirthHeight
module.exports.AssertMyBirthSeconds = nativeBinding.AssertMyBirthSeconds
module.exports.AssertMyCoinId = nativeBinding.AssertMyCoinId
module.exports.AssertMyParentId = nativeBinding.AssertMyParentId
module.exports.AssertMyPuzzleHash = nativeBinding.AssertMyPuzzleHash
module.exports.AssertPuzzleAnnouncement = nativeBinding.AssertPuzzleAnnouncement
module.exports.AssertSecondsAbsolute = nativeBinding.AssertSecondsAbsolute
module.exports.AssertSecondsRelative = nativeBinding.AssertSecondsRelative
module.exports.BlsPair = nativeBinding.BlsPair
module.exports.BlsPairWithCoin = nativeBinding.BlsPairWithCoin
module.exports.Cat = nativeBinding.Cat
module.exports.CatSpend = nativeBinding.CatSpend
module.exports.Clvm = nativeBinding.Clvm
module.exports.Coin = nativeBinding.Coin
module.exports.CoinSpend = nativeBinding.CoinSpend
module.exports.Constants = nativeBinding.Constants
module.exports.CreateCoin = nativeBinding.CreateCoin
module.exports.CreateCoinAnnouncement = nativeBinding.CreateCoinAnnouncement
module.exports.CreatePuzzleAnnouncement = nativeBinding.CreatePuzzleAnnouncement
module.exports.CurriedProgram = nativeBinding.CurriedProgram
module.exports.DidOwner = nativeBinding.DidOwner
module.exports.K1Pair = nativeBinding.K1Pair
module.exports.K1PublicKey = nativeBinding.K1PublicKey
module.exports.K1SecretKey = nativeBinding.K1SecretKey
module.exports.K1Signature = nativeBinding.K1Signature
module.exports.LineageProof = nativeBinding.LineageProof
module.exports.MintedNfts = nativeBinding.MintedNfts
module.exports.Mnemonic = nativeBinding.Mnemonic
module.exports.Nft = nativeBinding.Nft
module.exports.NftInfo = nativeBinding.NftInfo
module.exports.NftMetadata = nativeBinding.NftMetadata
module.exports.NftMint = nativeBinding.NftMint
module.exports.Output = nativeBinding.Output
module.exports.Pair = nativeBinding.Pair
module.exports.ParsedNft = nativeBinding.ParsedNft
module.exports.Program = nativeBinding.Program
module.exports.PublicKey = nativeBinding.PublicKey
module.exports.Puzzle = nativeBinding.Puzzle
module.exports.R1Pair = nativeBinding.R1Pair
module.exports.R1PublicKey = nativeBinding.R1PublicKey
module.exports.R1SecretKey = nativeBinding.R1SecretKey
module.exports.R1Signature = nativeBinding.R1Signature
module.exports.ReceiveMessage = nativeBinding.ReceiveMessage
module.exports.Remark = nativeBinding.Remark
module.exports.ReserveFee = nativeBinding.ReserveFee
module.exports.SecretKey = nativeBinding.SecretKey
module.exports.SendMessage = nativeBinding.SendMessage
module.exports.Signature = nativeBinding.Signature
module.exports.Simulator = nativeBinding.Simulator
module.exports.Softfork = nativeBinding.Softfork
module.exports.Spend = nativeBinding.Spend
module.exports.SpendBundle = nativeBinding.SpendBundle
module.exports.bytesEqual = nativeBinding.bytesEqual
module.exports.catPuzzleHash = nativeBinding.catPuzzleHash
module.exports.curryTreeHash = nativeBinding.curryTreeHash
module.exports.fromHex = nativeBinding.fromHex
module.exports.generateBytes = nativeBinding.generateBytes
module.exports.sha256 = nativeBinding.sha256
module.exports.standardPuzzleHash = nativeBinding.standardPuzzleHash
module.exports.toHex = nativeBinding.toHex
module.exports.treeHashAtom = nativeBinding.treeHashAtom
module.exports.treeHashPair = nativeBinding.treeHashPair
